import { app, BrowserWindow, ipcMain, dialog } from "electron";
import isDev from "electron-is-dev";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
import { updateElectronApp } from "update-electron-app";

// @ts-ignore
import started from "electron-squirrel-startup";

// 自动更新(苹果系统需要账号签名证书，所以苹果系统无法自动更新)
if (process.platform !== "darwin") {
  updateElectronApp({});
}

if (started) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1600,
    height: 900,
    minWidth: 400,
    minHeight: 200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  isDev && mainWindow.webContents.openDevTools();

  // 修改 CSP 以允许从特定源加载资源
  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            "connect-src 'self' https://api.moonshot.cn https://unpkg.com https://api.deepseek.com",
          ],
        },
      });
    }
  );
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// 监听来自渲染进程的'minimize'消息，最小化主窗口。
ipcMain.on("minimize", (event) => {
  mainWindow.minimize();
});

// 监听来自渲染进程的'maximize'消息，最大化主窗口。
ipcMain.on("maximize", (event) => {
  mainWindow.maximize();
});

// 监听来自渲染进程的'choose-file'消息，选择文件，并将结果返回给预加载脚本。
ipcMain.handle("choose-file", async (event, data) => {
  const result = await dialog.showOpenDialog(BrowserWindow.getFocusedWindow(), {
    properties: ["openFile"],
  });
  return result;
});
