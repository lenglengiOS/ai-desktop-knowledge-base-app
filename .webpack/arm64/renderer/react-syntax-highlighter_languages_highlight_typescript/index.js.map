{"version":3,"file":"react-syntax-highlighter_languages_highlight_typescript/index.js","mappings":"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","sources":["webpack://ai-desktop-knowledge-base-app/./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/typescript.js"],"sourcesContent":["const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\nconst KEYWORDS = [\"as\",\n// for exports\n\"in\", \"of\", \"if\", \"for\", \"while\", \"finally\", \"var\", \"new\", \"function\", \"do\", \"return\", \"void\", \"else\", \"break\", \"catch\", \"instanceof\", \"with\", \"throw\", \"case\", \"default\", \"try\", \"switch\", \"continue\", \"typeof\", \"delete\", \"let\", \"yield\", \"const\", \"class\",\n// JS handles these with a special rule\n// \"get\",\n// \"set\",\n\"debugger\", \"async\", \"await\", \"static\", \"import\", \"from\", \"export\", \"extends\"];\nconst LITERALS = [\"true\", \"false\", \"null\", \"undefined\", \"NaN\", \"Infinity\"];\nconst TYPES = [\"Intl\", \"DataView\", \"Number\", \"Math\", \"Date\", \"String\", \"RegExp\", \"Object\", \"Function\", \"Boolean\", \"Error\", \"Symbol\", \"Set\", \"Map\", \"WeakSet\", \"WeakMap\", \"Proxy\", \"Reflect\", \"JSON\", \"Promise\", \"Float64Array\", \"Int16Array\", \"Int32Array\", \"Int8Array\", \"Uint16Array\", \"Uint32Array\", \"Float32Array\", \"Array\", \"Uint8Array\", \"Uint8ClampedArray\", \"ArrayBuffer\", \"BigInt64Array\", \"BigUint64Array\", \"BigInt\"];\nconst ERROR_TYPES = [\"EvalError\", \"InternalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\"];\nconst BUILT_IN_GLOBALS = [\"setInterval\", \"setTimeout\", \"clearInterval\", \"clearTimeout\", \"require\", \"exports\", \"eval\", \"isFinite\", \"isNaN\", \"parseFloat\", \"parseInt\", \"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\", \"escape\", \"unescape\"];\nconst BUILT_IN_VARIABLES = [\"arguments\", \"this\", \"super\", \"console\", \"window\", \"document\", \"localStorage\", \"module\", \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, BUILT_IN_VARIABLES, TYPES, ERROR_TYPES);\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/\n\n/** @type LanguageFn */\nfunction javascript(hljs) {\n  /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */\n  const hasClosingTag = (match, {\n    after\n  }) => {\n    const tag = \"</\" + match[0].slice(1);\n    const pos = match.input.indexOf(tag, after);\n    return pos !== -1;\n  };\n  const IDENT_RE$1 = IDENT_RE;\n  const FRAGMENT = {\n    begin: '<>',\n    end: '</>'\n  };\n  const XML_TAG = {\n    begin: /<[A-Za-z0-9\\\\._:-]+/,\n    end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n    /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */\n    isTrulyOpeningTag: (match, response) => {\n      const afterMatchIndex = match[0].length + match.index;\n      const nextChar = match.input[afterMatchIndex];\n      // nested type?\n      // HTML should not include another raw `<` inside a tag\n      // But a type might: `<Array<Array<number>>`, etc.\n      if (nextChar === \"<\") {\n        response.ignoreMatch();\n        return;\n      }\n      // <something>\n      // This is now either a tag or a type.\n      if (nextChar === \">\") {\n        // if we cannot find a matching closing tag, then we\n        // will ignore it\n        if (!hasClosingTag(match, {\n          after: afterMatchIndex\n        })) {\n          response.ignoreMatch();\n        }\n      }\n    }\n  };\n  const KEYWORDS$1 = {\n    $pattern: IDENT_RE,\n    keyword: KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_INS\n  };\n\n  // https://tc39.es/ecma262/#sec-literals-numeric-literals\n  const decimalDigits = '[0-9](_?[0-9])*';\n  const frac = `\\\\.(${decimalDigits})`;\n  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n  const NUMBER = {\n    className: 'number',\n    variants: [\n    // DecimalLiteral\n    {\n      begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\\\b`\n    }, {\n      begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b`\n    },\n    // DecimalBigIntegerLiteral\n    {\n      begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b`\n    },\n    // NonDecimalIntegerLiteral\n    {\n      begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n    }, {\n      begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n    }, {\n      begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n    },\n    // LegacyOctalIntegerLiteral (does not include underscore separators)\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    {\n      begin: \"\\\\b0[0-7]+n?\\\\b\"\n    }],\n    relevance: 0\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{',\n    end: '\\\\}',\n    keywords: KEYWORDS$1,\n    contains: [] // defined later\n  };\n  const HTML_TEMPLATE = {\n    begin: 'html`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      subLanguage: 'xml'\n    }\n  };\n  const CSS_TEMPLATE = {\n    begin: 'css`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      subLanguage: 'css'\n    }\n  };\n  const TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`',\n    end: '`',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n  };\n  const JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, '\\\\*/', {\n    relevance: 0,\n    contains: [{\n      className: 'doctag',\n      begin: '@[A-Za-z]+',\n      contains: [{\n        className: 'type',\n        begin: '\\\\{',\n        end: '\\\\}',\n        relevance: 0\n      }, {\n        className: 'variable',\n        begin: IDENT_RE$1 + '(?=\\\\s*(-)|$)',\n        endsParent: true,\n        relevance: 0\n      },\n      // eat spaces (not newlines) so we can find\n      // types or variables\n      {\n        begin: /(?=[^\\n])\\s/,\n        relevance: 0\n      }]\n    }]\n  });\n  const COMMENT = {\n    className: \"comment\",\n    variants: [JSDOC_COMMENT, hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE]\n  };\n  const SUBST_INTERNALS = [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, HTML_TEMPLATE, CSS_TEMPLATE, TEMPLATE_STRING, NUMBER, hljs.REGEXP_MODE];\n  SUBST.contains = SUBST_INTERNALS.concat({\n    // we need to pair up {} inside our subst to prevent\n    // it from ending too early by matching another }\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS$1,\n    contains: [\"self\"].concat(SUBST_INTERNALS)\n  });\n  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n  // eat recursive parens in sub expressions\n  {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS$1,\n    contains: [\"self\"].concat(SUBST_AND_COMMENTS)\n  }]);\n  const PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: KEYWORDS$1,\n    contains: PARAMS_CONTAINS\n  };\n  return {\n    name: 'Javascript',\n    aliases: ['js', 'jsx', 'mjs', 'cjs'],\n    keywords: KEYWORDS$1,\n    // this will be extended by TypeScript\n    exports: {\n      PARAMS_CONTAINS\n    },\n    illegal: /#(?![$_A-z])/,\n    contains: [hljs.SHEBANG({\n      label: \"shebang\",\n      binary: \"node\",\n      relevance: 5\n    }), {\n      label: \"use_strict\",\n      className: 'meta',\n      relevance: 10,\n      begin: /^\\s*['\"]use (strict|asm)['\"]/\n    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, HTML_TEMPLATE, CSS_TEMPLATE, TEMPLATE_STRING, COMMENT, NUMBER, {\n      // object attr container\n      begin: concat(/[{,\\n]\\s*/,\n      // we need to look ahead to make sure that we actually have an\n      // attribute coming up so we don't steal a comma from a potential\n      // \"value\" container\n      //\n      // NOTE: this might not work how you think.  We don't actually always\n      // enter this mode and stay.  Instead it might merely match `,\n      // <comments up next>` and then immediately end after the , because it\n      // fails to find any actual attrs. But this still does the job because\n      // it prevents the value contain rule from grabbing this instead and\n      // prevening this rule from firing when we actually DO have keys.\n      lookahead(concat(\n      // we also need to allow for multiple possible comments inbetween\n      // the first key:value pairing\n      /(((\\/\\/.*$)|(\\/\\*(\\*[^/]|[^*])*\\*\\/))\\s*)*/, IDENT_RE$1 + '\\\\s*:'))),\n      relevance: 0,\n      contains: [{\n        className: 'attr',\n        begin: IDENT_RE$1 + lookahead('\\\\s*:'),\n        relevance: 0\n      }]\n    }, {\n      // \"value\" container\n      begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n      keywords: 'return throw case',\n      contains: [COMMENT, hljs.REGEXP_MODE, {\n        className: 'function',\n        // we have to count the parens to make sure we actually have the\n        // correct bounding ( ) before the =>.  There could be any number of\n        // sub-expressions inside also surrounded by parens.\n        begin: '(\\\\(' + '[^()]*(\\\\(' + '[^()]*(\\\\(' + '[^()]*' + '\\\\)[^()]*)*' + '\\\\)[^()]*)*' + '\\\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\\\s*=>',\n        returnBegin: true,\n        end: '\\\\s*=>',\n        contains: [{\n          className: 'params',\n          variants: [{\n            begin: hljs.UNDERSCORE_IDENT_RE,\n            relevance: 0\n          }, {\n            className: null,\n            begin: /\\(\\s*\\)/,\n            skip: true\n          }, {\n            begin: /\\(/,\n            end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            keywords: KEYWORDS$1,\n            contains: PARAMS_CONTAINS\n          }]\n        }]\n      }, {\n        // could be a comma delimited list of params to a function call\n        begin: /,/,\n        relevance: 0\n      }, {\n        className: '',\n        begin: /\\s/,\n        end: /\\s*/,\n        skip: true\n      }, {\n        // JSX\n        variants: [{\n          begin: FRAGMENT.begin,\n          end: FRAGMENT.end\n        }, {\n          begin: XML_TAG.begin,\n          // we carefully check the opening tag to see if it truly\n          // is a tag and not a false positive\n          'on:begin': XML_TAG.isTrulyOpeningTag,\n          end: XML_TAG.end\n        }],\n        subLanguage: 'xml',\n        contains: [{\n          begin: XML_TAG.begin,\n          end: XML_TAG.end,\n          skip: true,\n          contains: ['self']\n        }]\n      }],\n      relevance: 0\n    }, {\n      className: 'function',\n      beginKeywords: 'function',\n      end: /[{;]/,\n      excludeEnd: true,\n      keywords: KEYWORDS$1,\n      contains: ['self', hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      }), PARAMS],\n      illegal: /%/\n    }, {\n      // prevent this from getting swallowed up by function\n      // since they appear \"function like\"\n      beginKeywords: \"while if switch catch for\"\n    }, {\n      className: 'function',\n      // we have to count the parens to make sure we actually have the correct\n      // bounding ( ).  There could be any number of sub-expressions inside\n      // also surrounded by parens.\n      begin: hljs.UNDERSCORE_IDENT_RE + '\\\\(' +\n      // first parens\n      '[^()]*(\\\\(' + '[^()]*(\\\\(' + '[^()]*' + '\\\\)[^()]*)*' + '\\\\)[^()]*)*' + '\\\\)\\\\s*\\\\{',\n      // end parens\n      returnBegin: true,\n      contains: [PARAMS, hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      })]\n    },\n    // hack: prevents detection of keywords in some circumstances\n    // .keyword()\n    // $keyword = x\n    {\n      variants: [{\n        begin: '\\\\.' + IDENT_RE$1\n      }, {\n        begin: '\\\\$' + IDENT_RE$1\n      }],\n      relevance: 0\n    }, {\n      // ES6 class\n      className: 'class',\n      beginKeywords: 'class',\n      end: /[{;=]/,\n      excludeEnd: true,\n      illegal: /[:\"[\\]]/,\n      contains: [{\n        beginKeywords: 'extends'\n      }, hljs.UNDERSCORE_TITLE_MODE]\n    }, {\n      begin: /\\b(?=constructor)/,\n      end: /[{;]/,\n      excludeEnd: true,\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      }), 'self', PARAMS]\n    }, {\n      begin: '(get|set)\\\\s+(?=' + IDENT_RE$1 + '\\\\()',\n      end: /\\{/,\n      keywords: \"get set\",\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      }), {\n        begin: /\\(\\)/\n      },\n      // eat to avoid empty params\n      PARAMS]\n    }, {\n      begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n    }]\n  };\n}\n\n/*\nLanguage: TypeScript\nAuthor: Panu Horsmalahti <panu.horsmalahti@iki.fi>\nContributors: Ike Ku <dempfi@yahoo.com>\nDescription: TypeScript is a strict superset of JavaScript\nWebsite: https://www.typescriptlang.org\nCategory: common, scripting\n*/\n\n/** @type LanguageFn */\nfunction typescript(hljs) {\n  const IDENT_RE$1 = IDENT_RE;\n  const NAMESPACE = {\n    beginKeywords: 'namespace',\n    end: /\\{/,\n    excludeEnd: true\n  };\n  const INTERFACE = {\n    beginKeywords: 'interface',\n    end: /\\{/,\n    excludeEnd: true,\n    keywords: 'interface extends'\n  };\n  const USE_STRICT = {\n    className: 'meta',\n    relevance: 10,\n    begin: /^\\s*['\"]use strict['\"]/\n  };\n  const TYPES = [\"any\", \"void\", \"number\", \"boolean\", \"string\", \"object\", \"never\", \"enum\"];\n  const TS_SPECIFIC_KEYWORDS = [\"type\", \"namespace\", \"typedef\", \"interface\", \"public\", \"private\", \"protected\", \"implements\", \"declare\", \"abstract\", \"readonly\"];\n  const KEYWORDS$1 = {\n    $pattern: IDENT_RE,\n    keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),\n    literal: LITERALS,\n    built_in: BUILT_INS.concat(TYPES)\n  };\n  const DECORATOR = {\n    className: 'meta',\n    begin: '@' + IDENT_RE$1\n  };\n  const swapMode = (mode, label, replacement) => {\n    const indx = mode.contains.findIndex(m => m.label === label);\n    if (indx === -1) {\n      throw new Error(\"can not find mode to replace\");\n    }\n    mode.contains.splice(indx, 1, replacement);\n  };\n  const tsLanguage = javascript(hljs);\n\n  // this should update anywhere keywords is used since\n  // it will be the same actual JS object\n  Object.assign(tsLanguage.keywords, KEYWORDS$1);\n  tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);\n  tsLanguage.contains = tsLanguage.contains.concat([DECORATOR, NAMESPACE, INTERFACE]);\n\n  // TS gets a simpler shebang rule than JS\n  swapMode(tsLanguage, \"shebang\", hljs.SHEBANG());\n  // JS use strict rule purposely excludes `asm` which makes no sense\n  swapMode(tsLanguage, \"use_strict\", USE_STRICT);\n  const functionDeclaration = tsLanguage.contains.find(m => m.className === \"function\");\n  functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript\n\n  Object.assign(tsLanguage, {\n    name: 'TypeScript',\n    aliases: ['ts', 'tsx']\n  });\n  return tsLanguage;\n}\nmodule.exports = typescript;"],"names":["IDENT_RE","KEYWORDS","LITERALS","BUILT_INS","concat","lookahead","re","args","map","x","source","join","module","exports","hljs","IDENT_RE$1","KEYWORDS$1","$pattern","keyword","literal","built_in","DECORATOR","className","begin","swapMode","mode","label","replacement","indx","contains","findIndex","m","Error","splice","tsLanguage","XML_TAG","end","isTrulyOpeningTag","match","response","afterMatchIndex","length","index","nextChar","input","after","tag","slice","indexOf","hasClosingTag","ignoreMatch","decimalDigits","frac","decimalInteger","NUMBER","variants","relevance","SUBST","keywords","HTML_TEMPLATE","starts","returnEnd","BACKSLASH_ESCAPE","subLanguage","CSS_TEMPLATE","TEMPLATE_STRING","COMMENT","endsParent","C_BLOCK_COMMENT_MODE","C_LINE_COMMENT_MODE","SUBST_INTERNALS","APOS_STRING_MODE","QUOTE_STRING_MODE","REGEXP_MODE","SUBST_AND_COMMENTS","PARAMS_CONTAINS","PARAMS","excludeBegin","excludeEnd","name","aliases","illegal","SHEBANG","binary","RE_STARTERS_RE","UNDERSCORE_IDENT_RE","returnBegin","skip","beginKeywords","inherit","TITLE_MODE","UNDERSCORE_TITLE_MODE","javascript","Object","assign","push","find"],"sourceRoot":""}