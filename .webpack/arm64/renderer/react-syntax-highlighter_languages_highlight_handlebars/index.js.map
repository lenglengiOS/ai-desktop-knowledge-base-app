{"version":3,"file":"react-syntax-highlighter_languages_highlight_handlebars/index.js","mappings":"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","sources":["webpack://ai-desktop-knowledge-base-app/./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/handlebars.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(', re, ')*');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map(x => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Handlebars\nRequires: xml.js\nAuthor: Robin Ward <robin.ward@gmail.com>\nDescription: Matcher for Handlebars as well as EmberJS additions.\nWebsite: https://handlebarsjs.com\nCategory: template\n*/\n\nfunction handlebars(hljs) {\n  const BUILT_INS = {\n    'builtin-name': ['action', 'bindattr', 'collection', 'component', 'concat', 'debugger', 'each', 'each-in', 'get', 'hash', 'if', 'in', 'input', 'link-to', 'loc', 'log', 'lookup', 'mut', 'outlet', 'partial', 'query-params', 'render', 'template', 'textarea', 'unbound', 'unless', 'view', 'with', 'yield']\n  };\n  const LITERALS = {\n    literal: ['true', 'false', 'undefined', 'null']\n  };\n\n  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n  // like a/b, ./abc/cde, and abc.bcd\n\n  const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\n  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\n  const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\n  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n  const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\n  const ANY_ID = either(DOUBLE_QUOTED_ID_REGEX, SINGLE_QUOTED_ID_REGEX, BRACKET_QUOTED_ID_REGEX, PLAIN_ID_REGEX);\n  const IDENTIFIER_REGEX = concat(optional(/\\.|\\.\\/|\\//),\n  // relative or absolute path\n  ANY_ID, anyNumberOfTimes(concat(PATH_DELIMITER_REGEX, ANY_ID)));\n\n  // identifier followed by a equal-sign (without the equal sign)\n  const HASH_PARAM_REGEX = concat('(', BRACKET_QUOTED_ID_REGEX, '|', PLAIN_ID_REGEX, ')(?==)');\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\n    begin: IDENTIFIER_REGEX,\n    lexemes: /[\\w.\\/]+/\n  };\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: LITERALS\n  });\n  const SUB_EXPRESSION = {\n    begin: /\\(/,\n    end: /\\)/\n    // the \"contains\" is added below when all necessary sub-modes are defined\n  };\n  const HASH = {\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\n    className: 'attr',\n    begin: HASH_PARAM_REGEX,\n    relevance: 0,\n    starts: {\n      begin: /=/,\n      end: /=/,\n      starts: {\n        contains: [hljs.NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, HELPER_PARAMETER, SUB_EXPRESSION]\n      }\n    }\n  };\n  const BLOCK_PARAMS = {\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n    begin: /as\\s+\\|/,\n    keywords: {\n      keyword: 'as'\n    },\n    end: /\\|/,\n    contains: [{\n      // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n      begin: /\\w+/\n    }]\n  };\n  const HELPER_PARAMETERS = {\n    contains: [hljs.NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, BLOCK_PARAMS, HASH, HELPER_PARAMETER, SUB_EXPRESSION],\n    returnEnd: true\n    // the property \"end\" is defined through inheritance when the mode is used. If depends\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n    // end-token of the surrounding mode)\n  };\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\)/\n    })\n  });\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name',\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name'\n  });\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\{\\{/,\n    skip: true\n  };\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\\\(?=\\{\\{)/,\n    skip: true\n  };\n  return {\n    name: 'Handlebars',\n    aliases: ['hbs', 'html.hbs', 'html.handlebars', 'htmlbars'],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH, PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH, hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/), hljs.COMMENT(/\\{\\{!/, /\\}\\}/), {\n      // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n      className: 'template-tag',\n      begin: /\\{\\{\\{\\{(?!\\/)/,\n      end: /\\}\\}\\}\\}/,\n      contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n      starts: {\n        end: /\\{\\{\\{\\{\\//,\n        returnEnd: true,\n        subLanguage: 'xml'\n      }\n    }, {\n      // close raw block\n      className: 'template-tag',\n      begin: /\\{\\{\\{\\{\\//,\n      end: /\\}\\}\\}\\}/,\n      contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n    }, {\n      // open block statement\n      className: 'template-tag',\n      begin: /\\{\\{#/,\n      end: /\\}\\}/,\n      contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n    }, {\n      className: 'template-tag',\n      begin: /\\{\\{(?=else\\}\\})/,\n      end: /\\}\\}/,\n      keywords: 'else'\n    }, {\n      className: 'template-tag',\n      begin: /\\{\\{(?=else if)/,\n      end: /\\}\\}/,\n      keywords: 'else if'\n    }, {\n      // closing block statement\n      className: 'template-tag',\n      begin: /\\{\\{\\//,\n      end: /\\}\\}/,\n      contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n    }, {\n      // template variable or helper-call that is NOT html-escaped\n      className: 'template-variable',\n      begin: /\\{\\{\\{/,\n      end: /\\}\\}\\}/,\n      contains: [BASIC_MUSTACHE_CONTENTS]\n    }, {\n      // template variable or helper-call that is html-escaped\n      className: 'template-variable',\n      begin: /\\{\\{/,\n      end: /\\}\\}/,\n      contains: [BASIC_MUSTACHE_CONTENTS]\n    }]\n  };\n}\nmodule.exports = handlebars;"],"names":["source","re","concat","args","map","x","join","module","exports","hljs","BUILT_INS","BRACKET_QUOTED_ID_REGEX","PLAIN_ID_REGEX","ANY_ID","either","IDENTIFIER_REGEX","HASH_PARAM_REGEX","HELPER_NAME_OR_PATH_EXPRESSION","begin","lexemes","HELPER_PARAMETER","inherit","keywords","literal","SUB_EXPRESSION","end","HASH","className","relevance","starts","contains","NUMBER_MODE","QUOTE_STRING_MODE","APOS_STRING_MODE","HELPER_PARAMETERS","keyword","returnEnd","SUB_EXPRESSION_CONTENTS","OPENING_BLOCK_MUSTACHE_CONTENTS","CLOSING_BLOCK_MUSTACHE_CONTENTS","BASIC_MUSTACHE_CONTENTS","name","aliases","case_insensitive","subLanguage","skip","COMMENT"],"sourceRoot":""}