{"version":3,"file":"react-syntax-highlighter_languages_highlight_yaml/index.js","mappings":"4HAkLAA,EAAOC,QAzKP,SAAcC,GACZ,IAAIC,EAAW,yBAGXC,EAAiB,8BAgCjBC,EAAS,CACXC,UAAW,SACXC,UAAW,EACXC,SAAU,CAAC,CACTC,MAAO,IACPC,IAAK,KACJ,CACDD,MAAO,IACPC,IAAK,KACJ,CACDD,MAAO,QAETE,SAAU,CAACT,EAAKU,iBAzBO,CACvBN,UAAW,oBACXE,SAAU,CAAC,CACTC,MAAO,OACPC,IAAK,QAGP,CACED,MAAO,MACPC,IAAK,UAqBLG,EAAmBX,EAAKY,QAAQT,EAAQ,CAC1CG,SAAU,CAAC,CACTC,MAAO,IACPC,IAAK,KACJ,CACDD,MAAO,IACPC,IAAK,KACJ,CACDD,MAAO,mBAWPM,EAAkB,CACpBL,IAAK,IACLM,gBAAgB,EAChBC,YAAY,EACZC,SAAUf,EACVI,UAAW,GAETY,EAAS,CACXV,MAAO,KACPC,IAAK,KACLC,SAAU,CAACI,GACXK,QAAS,MACTb,UAAW,GAETc,EAAQ,CACVZ,MAAO,MACPC,IAAK,MACLC,SAAU,CAACI,GACXK,QAAS,MACTb,UAAW,GAETe,EAAQ,CAnFF,CACRhB,UAAW,OACXE,SAAU,CAAC,CACTC,MAAO,gCACN,CACDA,MAAO,kCAGT,CACEA,MAAO,oCA0EO,CAChBH,UAAW,OACXG,MAAO,YACPF,UAAW,IACV,CAMDD,UAAW,SACXG,MAAO,iEACN,CAEDA,MAAO,WACPC,IAAK,UACLa,YAAa,OACbC,cAAc,EACdP,YAAY,EACZV,UAAW,GACV,CAEDD,UAAW,OACXG,MAAO,SAAWL,GAGpB,CAEEE,UAAW,OACXG,MAAO,KAAOL,EAAiB,KAC9B,CAEDE,UAAW,OACXG,MAAO,IAAML,GACZ,CAEDE,UAAW,OACXG,MAAO,KAAOL,GACb,CAEDE,UAAW,OACXG,MAAO,IAAMP,EAAKuB,oBAAsB,KACvC,CAEDnB,UAAW,OACXG,MAAO,MAAQP,EAAKuB,oBAAsB,KACzC,CAEDnB,UAAW,SAEXG,MAAO,aACPF,UAAW,GACVL,EAAKwB,kBAAmB,CACzBC,cAAexB,EACfe,SAAU,CACRU,QAASzB,IAhFG,CACdG,UAAW,SACXG,MAAO,iIAmFT,CACEH,UAAW,SACXG,MAAOP,EAAK2B,YAAc,MAC1BtB,UAAW,GACVY,EAAQE,EAAOhB,GACdyB,EAAc,IAAIR,GAItB,OAHAQ,EAAYC,MACZD,EAAYE,KAAKnB,GACjBE,EAAgBJ,SAAWmB,EACpB,CACLG,KAAM,OACNC,kBAAkB,EAClBC,QAAS,CAAC,OACVxB,SAAUW,EAEd,C","sources":["webpack://ai-desktop-knowledge-base-app/./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/yaml.js"],"sourcesContent":["/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/\nfunction yaml(hljs) {\n  var LITERALS = 'true false yes no null';\n\n  // YAML spec allows non-reserved URI characters in tags.\n  var URI_CHARACTERS = '[\\\\w#;/?:@&=+$,.~*\\'()[\\\\]]+';\n\n  // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n  var KEY = {\n    className: 'attr',\n    variants: [{\n      begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)'\n    }, {\n      begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)'\n    },\n    // double quoted keys\n    {\n      begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)'\n    } // single quoted keys\n    ]\n  };\n  var TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [{\n      begin: /\\{\\{/,\n      end: /\\}\\}/\n    },\n    // jinja templates Ansible\n    {\n      begin: /%\\{/,\n      end: /\\}/\n    } // Ruby i18n\n    ]\n  };\n  var STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /\\S+/\n    }],\n    contains: [hljs.BACKSLASH_ESCAPE, TEMPLATE_VARIABLES]\n  };\n\n  // Strings inside of value containers (objects) can't contain braces,\n  // brackets, or commas\n  var CONTAINER_STRING = hljs.inherit(STRING, {\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /[^\\s,{}[\\]]+/\n    }]\n  });\n  var DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';\n  var TIME_RE = '([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?';\n  var FRACTION_RE = '(\\\\.[0-9]*)?';\n  var ZONE_RE = '([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';\n  var TIMESTAMP = {\n    className: 'number',\n    begin: '\\\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\\\b'\n  };\n  var VALUE_CONTAINER = {\n    end: ',',\n    endsWithParent: true,\n    excludeEnd: true,\n    keywords: LITERALS,\n    relevance: 0\n  };\n  var OBJECT = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  var ARRAY = {\n    begin: '\\\\[',\n    end: '\\\\]',\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  var MODES = [KEY, {\n    className: 'meta',\n    begin: '^---\\\\s*$',\n    relevance: 10\n  }, {\n    // multi line string\n    // Blocks start with a | or > followed by a newline\n    //\n    // Indentation of subsequent lines must be the same to\n    // be considered part of the block\n    className: 'string',\n    begin: '[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*'\n  }, {\n    // Ruby/Rails erb\n    begin: '<%[%=-]?',\n    end: '[%-]?%>',\n    subLanguage: 'ruby',\n    excludeBegin: true,\n    excludeEnd: true,\n    relevance: 0\n  }, {\n    // named tags\n    className: 'type',\n    begin: '!\\\\w+!' + URI_CHARACTERS\n  },\n  // https://yaml.org/spec/1.2/spec.html#id2784064\n  {\n    // verbatim tags\n    className: 'type',\n    begin: '!<' + URI_CHARACTERS + \">\"\n  }, {\n    // primary tags\n    className: 'type',\n    begin: '!' + URI_CHARACTERS\n  }, {\n    // secondary tags\n    className: 'type',\n    begin: '!!' + URI_CHARACTERS\n  }, {\n    // fragment id &ref\n    className: 'meta',\n    begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\n  }, {\n    // fragment reference *ref\n    className: 'meta',\n    begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n  }, {\n    // array listing\n    className: 'bullet',\n    // TODO: remove |$ hack when we have proper look-ahead support\n    begin: '-(?=[ ]|$)',\n    relevance: 0\n  }, hljs.HASH_COMMENT_MODE, {\n    beginKeywords: LITERALS,\n    keywords: {\n      literal: LITERALS\n    }\n  }, TIMESTAMP,\n  // numbers are any valid C-style number that\n  // sit isolated from other words\n  {\n    className: 'number',\n    begin: hljs.C_NUMBER_RE + '\\\\b',\n    relevance: 0\n  }, OBJECT, ARRAY, STRING];\n  var VALUE_MODES = [...MODES];\n  VALUE_MODES.pop();\n  VALUE_MODES.push(CONTAINER_STRING);\n  VALUE_CONTAINER.contains = VALUE_MODES;\n  return {\n    name: 'YAML',\n    case_insensitive: true,\n    aliases: ['yml'],\n    contains: MODES\n  };\n}\nmodule.exports = yaml;"],"names":["module","exports","hljs","LITERALS","URI_CHARACTERS","STRING","className","relevance","variants","begin","end","contains","BACKSLASH_ESCAPE","CONTAINER_STRING","inherit","VALUE_CONTAINER","endsWithParent","excludeEnd","keywords","OBJECT","illegal","ARRAY","MODES","subLanguage","excludeBegin","UNDERSCORE_IDENT_RE","HASH_COMMENT_MODE","beginKeywords","literal","C_NUMBER_RE","VALUE_MODES","pop","push","name","case_insensitive","aliases"],"sourceRoot":""}