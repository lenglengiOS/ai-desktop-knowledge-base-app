{"version":3,"file":"react-syntax-highlighter_languages_highlight_cpp/index.js","mappings":"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","sources":["webpack://ai-desktop-knowledge-base-app/./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/cpp.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cpp(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [{\n      begin: /\\\\\\n/\n    }]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' + DECLTYPE_AUTO_RE + '|' + optional(NAMESPACE_RE) + '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) + ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n      end: '\\'',\n      illegal: '.'\n    }, hljs.END_SAME_AS_BEGIN({\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n      end: /\\)([^()\\\\ ]{0,16})\"/\n    })]\n  };\n  const NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'meta-string'\n    }), {\n      className: 'meta-string',\n      begin: /<.*?>/\n    }, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n  const COMMON_CPP_HINTS = ['asin', 'atan2', 'atan', 'calloc', 'ceil', 'cosh', 'cos', 'exit', 'exp', 'fabs', 'floor', 'fmod', 'fprintf', 'fputs', 'free', 'frexp', 'auto_ptr', 'deque', 'list', 'queue', 'stack', 'vector', 'map', 'set', 'pair', 'bitset', 'multiset', 'multimap', 'unordered_set', 'fscanf', 'future', 'isalnum', 'isalpha', 'iscntrl', 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 'isupper', 'isxdigit', 'tolower', 'toupper', 'labs', 'ldexp', 'log10', 'log', 'malloc', 'realloc', 'memchr', 'memcmp', 'memcpy', 'memset', 'modf', 'pow', 'printf', 'putchar', 'puts', 'scanf', 'sinh', 'sin', 'snprintf', 'sprintf', 'sqrt', 'sscanf', 'strcat', 'strchr', 'strcmp', 'strcpy', 'strcspn', 'strlen', 'strncat', 'strncmp', 'strncpy', 'strpbrk', 'strrchr', 'strspn', 'strstr', 'tanh', 'tan', 'unordered_map', 'unordered_multiset', 'unordered_multimap', 'priority_queue', 'make_pair', 'array', 'shared_ptr', 'abort', 'terminate', 'abs', 'acos', 'vfprintf', 'vprintf', 'vsprintf', 'endl', 'initializer_list', 'unique_ptr', 'complex', 'imaginary', 'std', 'string', 'wstring', 'cin', 'cout', 'cerr', 'clog', 'stdin', 'stdout', 'stderr', 'stringstream', 'istringstream', 'ostringstream'];\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid wchar_t ' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' + 'concept co_await co_return co_yield requires ' + 'noexcept static_assert thread_local restrict final override ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: '_Bool _Complex _Imaginary',\n    _relevance_hints: COMMON_CPP_HINTS,\n    literal: 'true false nullptr NULL'\n  };\n  const FUNCTION_DISPATCH = {\n    className: \"function.dispatch\",\n    relevance: 0,\n    keywords: CPP_KEYWORDS,\n    begin: concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!while)/, hljs.IDENT_RE, lookahead(/\\s*\\(/))\n  };\n  const EXPRESSION_CONTAINS = [FUNCTION_DISPATCH, PREPROCESSOR, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [{\n      begin: /=/,\n      end: /;/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      beginKeywords: 'new throw return else',\n      end: /;/\n    }],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat(['self']),\n      relevance: 0\n    }]),\n    relevance: 0\n  };\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [{\n      // to prevent it from being confused as the function title\n      begin: DECLTYPE_AUTO_RE,\n      keywords: CPP_KEYWORDS,\n      relevance: 0\n    }, {\n      begin: FUNCTION_TITLE,\n      returnBegin: true,\n      contains: [TITLE_MODE],\n      relevance: 0\n    },\n    // needed because we do not have look-behind on the below rule\n    // to prevent it from grabbing the final : in a :: pair\n    {\n      begin: /::/,\n      relevance: 0\n    },\n    // initializers\n    {\n      begin: /:/,\n      endsWithParent: true,\n      contains: [STRINGS, NUMBERS]\n    }, {\n      className: 'params',\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      relevance: 0,\n      contains: [C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES,\n      // Count matching parentheses.\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: ['self', C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n      }]\n    }, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n  };\n  return {\n    name: 'C++',\n    aliases: ['cc', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: {\n      \"function.dispatch\": \"built_in\"\n    },\n    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [PREPROCESSOR, {\n      // containers: ie, `vector <int> rooms (9);`\n      begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      className: 'class',\n      beginKeywords: 'enum class struct union',\n      end: /[{;:<>=]/,\n      contains: [{\n        beginKeywords: \"final class struct\"\n      }, hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\nmodule.exports = cpp;"],"names":["optional","re","concat","args","map","x","source","join","module","exports","hljs","C_LINE_COMMENT_MODE","COMMENT","contains","begin","DECLTYPE_AUTO_RE","NAMESPACE_RE","FUNCTION_TYPE_RE","CPP_PRIMITIVE_TYPES","className","STRINGS","variants","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","CPP_KEYWORDS","keyword","built_in","_relevance_hints","literal","FUNCTION_DISPATCH","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","FUNCTION_DECLARATION","returnBegin","excludeEnd","endsWithParent","name","aliases","classNameAliases","preprocessor","strings"],"sourceRoot":""}