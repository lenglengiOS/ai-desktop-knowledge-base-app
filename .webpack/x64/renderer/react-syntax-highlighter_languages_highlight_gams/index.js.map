{"version":3,"file":"react-syntax-highlighter_languages_highlight_gams/index.js","mappings":"4HA2BA,SAASA,KAAUC,GAEjB,OADeA,EAAKC,KAAIC,IAAKC,OAnBfC,EAmBsBF,GAjBlB,iBAAPE,EAAwBA,EAC5BA,EAAGD,OAFM,KADlB,IAAgBC,CAmBwB,IAAEC,KAAK,GAE/C,CA0GAC,EAAOC,QAvGP,SAAcC,GACZ,MAAMC,EAAW,CACfC,QAAS,oVACTC,QAAS,aACTC,SAAU,u3BASNC,EAAU,CACdC,UAAW,SACXC,SAAU,CAAC,CACTC,MAAO,cACN,CACDA,MAAO,QAGLC,EAAO,CAEXH,UAAW,UACXC,SAAU,CAAC,CACTC,MAAO,IACPE,IAAK,KACJ,CACDF,MAAO,IACPE,IAAK,MAEPC,QAAS,MACTC,SAAU,CAACZ,EAAKa,mBAEZC,EAAa,CACjBN,MAAO,IACPE,IAAK,IACLK,SAAUd,EACVW,SAAU,CAACH,EAAMT,EAAKgB,oBAAqBhB,EAAKiB,qBAAsBjB,EAAKkB,kBAAmBlB,EAAKmB,iBAAkBnB,EAAKoB,gBAEtHC,EAAe,uCACfC,EAAW,CAEfd,MAAO,2CACPe,cAAc,EACdb,IAAK,IACLc,gBAAgB,EAChBZ,SAAU,CAACH,EAAMK,EAAY,CAC3BR,UAAW,UAEXE,MAAOjB,EAAO8B,GAhEMzB,EAkEHL,EAAO,OAAQ8B,GAjE7B9B,EAAO,IAAKK,EAAI,QAkEnB6B,UAAW,KAnEjB,IAA0B7B,EAsExB,MAAO,CACL8B,KAAM,OACNC,QAAS,CAAC,OACVC,kBAAkB,EAClBb,SAAUd,EACVW,SAAU,CAACZ,EAAK6B,QAAQ,YAAa,cAAe,CAClDvB,UAAW,OACXE,MAAO,gBACPE,IAAK,IACLoB,aAAa,EACblB,SAAU,CAAC,CACTN,UAAW,eACXE,MAAO,mBAERR,EAAK6B,QAAQ,OAAQ,KAAM7B,EAAKgB,oBAAqBhB,EAAKiB,qBAAsBjB,EAAKkB,kBAAmBlB,EAAKmB,iBAEhH,CACEY,cAAe,qFACfrB,IAAK,IACLE,SAAU,CAACZ,EAAK6B,QAAQ,OAAQ,KAAM7B,EAAKgB,oBAAqBhB,EAAKiB,qBAAsBjB,EAAKkB,kBAAmBlB,EAAKmB,iBAAkBL,EAAYQ,IACrJ,CAEDS,cAAe,QACfrB,IAAK,IACLoB,aAAa,EACblB,SAAU,CAAC,CAETmB,cAAe,QACfrB,IAAK,IACLE,SAAU,CAACU,IACVtB,EAAK6B,QAAQ,OAAQ,KAAM7B,EAAKgB,oBAAqBhB,EAAKiB,qBAAsBjB,EAAKkB,kBAAmBlB,EAAKmB,iBAAkBnB,EAAKoB,gBAKzI,CACEd,UAAW,WACXE,MAAO,iCACPsB,aAAa,EACblB,SAAU,CAAC,CAETN,UAAW,QACXE,MAAO,eA5FE,CACbF,UAAW,SACXE,MAAO,KACPE,IAAK,KACLa,cAAc,EACdS,YAAY,GAwFC3B,IACVL,EAAKoB,cAAef,GAE3B,C","sources":["webpack://ai-desktop-knowledge-base-app/./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/gams.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(', re, ')*');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n\n/** @type LanguageFn */\nfunction gams(hljs) {\n  const KEYWORDS = {\n    keyword: 'abort acronym acronyms alias all and assign binary card diag display ' + 'else eq file files for free ge gt if integer le loop lt maximizing ' + 'minimizing model models ne negative no not option options or ord ' + 'positive prod put putpage puttl repeat sameas semicont semiint smax ' + 'smin solve sos1 sos2 sum system table then until using while xor yes',\n    literal: 'eps inf na',\n    built_in: 'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy ' + 'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact ' + 'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max ' + 'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power ' + 'randBinomial randLinear randTriangle round rPower sigmoid sign ' + 'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt ' + 'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp ' + 'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt ' + 'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear ' + 'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion ' + 'handleCollect handleDelete handleStatus handleSubmit heapFree ' + 'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate ' + 'licenseLevel licenseStatus maxExecError sleep timeClose timeComp ' + 'timeElapsed timeExec timeStart'\n  };\n  const PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true\n  };\n  const SYMBOLS = {\n    className: 'symbol',\n    variants: [{\n      begin: /=[lgenxc]=/\n    }, {\n      begin: /\\$/\n    }]\n  };\n  const QSTR = {\n    // One-line quoted comment string\n    className: 'comment',\n    variants: [{\n      begin: '\\'',\n      end: '\\''\n    }, {\n      begin: '\"',\n      end: '\"'\n    }],\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  const ASSIGNMENT = {\n    begin: '/',\n    end: '/',\n    keywords: KEYWORDS,\n    contains: [QSTR, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE]\n  };\n  const COMMENT_WORD = /[a-z0-9&#*=?@\\\\><:,()$[\\]_.{}!+%^-]+/;\n  const DESCTEXT = {\n    // Parameter/set/variable description text\n    begin: /[a-z][a-z0-9_]*(\\([a-z0-9_, ]*\\))?[ \\t]+/,\n    excludeBegin: true,\n    end: '$',\n    endsWithParent: true,\n    contains: [QSTR, ASSIGNMENT, {\n      className: 'comment',\n      // one comment word, then possibly more\n      begin: concat(COMMENT_WORD,\n      // [ ] because \\s would be too broad (matching newlines)\n      anyNumberOfTimes(concat(/[ ]+/, COMMENT_WORD))),\n      relevance: 0\n    }]\n  };\n  return {\n    name: 'GAMS',\n    aliases: ['gms'],\n    case_insensitive: true,\n    keywords: KEYWORDS,\n    contains: [hljs.COMMENT(/^\\$ontext/, /^\\$offtext/), {\n      className: 'meta',\n      begin: '^\\\\$[a-z0-9]+',\n      end: '$',\n      returnBegin: true,\n      contains: [{\n        className: 'meta-keyword',\n        begin: '^\\\\$[a-z0-9]+'\n      }]\n    }, hljs.COMMENT('^\\\\*', '$'), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE,\n    // Declarations\n    {\n      beginKeywords: 'set sets parameter parameters variable variables ' + 'scalar scalars equation equations',\n      end: ';',\n      contains: [hljs.COMMENT('^\\\\*', '$'), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, ASSIGNMENT, DESCTEXT]\n    }, {\n      // table environment\n      beginKeywords: 'table',\n      end: ';',\n      returnBegin: true,\n      contains: [{\n        // table header row\n        beginKeywords: 'table',\n        end: '$',\n        contains: [DESCTEXT]\n      }, hljs.COMMENT('^\\\\*', '$'), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE\n      // Table does not contain DESCTEXT or ASSIGNMENT\n      ]\n    },\n    // Function definitions\n    {\n      className: 'function',\n      begin: /^[a-z][a-z0-9_,\\-+' ()$]+\\.{2}/,\n      returnBegin: true,\n      contains: [{\n        // Function title\n        className: 'title',\n        begin: /^[a-z0-9_]+/\n      }, PARAMS, SYMBOLS]\n    }, hljs.C_NUMBER_MODE, SYMBOLS]\n  };\n}\nmodule.exports = gams;"],"names":["concat","args","map","x","source","re","join","module","exports","hljs","KEYWORDS","keyword","literal","built_in","SYMBOLS","className","variants","begin","QSTR","end","illegal","contains","BACKSLASH_ESCAPE","ASSIGNMENT","keywords","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","QUOTE_STRING_MODE","APOS_STRING_MODE","C_NUMBER_MODE","COMMENT_WORD","DESCTEXT","excludeBegin","endsWithParent","relevance","name","aliases","case_insensitive","COMMENT","returnBegin","beginKeywords","excludeEnd"],"sourceRoot":""}