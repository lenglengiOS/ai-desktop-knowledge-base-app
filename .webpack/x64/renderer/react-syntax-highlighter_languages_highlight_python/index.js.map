{"version":3,"file":"react-syntax-highlighter_languages_highlight_python/index.js","mappings":"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","sources":["webpack://ai-desktop-knowledge-base-app/./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/python.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/\n\nfunction python(hljs) {\n  const RESERVED_WORDS = ['and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal|10', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'];\n  const BUILT_INS = ['__import__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'];\n  const LITERALS = ['__debug__', 'Ellipsis', 'False', 'None', 'NotImplemented', 'True'];\n\n  // https://docs.python.org/3/library/typing.html\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\n  // contexts, leaving these remaining only for relevance hinting?\n  const TYPES = [\"Any\", \"Callable\", \"Coroutine\", \"Dict\", \"List\", \"Literal\", \"Generic\", \"Optional\", \"Sequence\", \"Set\", \"Tuple\", \"Type\", \"Union\"];\n  const KEYWORDS = {\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\n    keyword: RESERVED_WORDS,\n    built_in: BUILT_INS,\n    literal: LITERALS,\n    type: TYPES\n  };\n  const PROMPT = {\n    className: 'meta',\n    begin: /^(>>>|\\.\\.\\.) /\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS,\n    illegal: /#/\n  };\n  const LITERAL_BRACKET = {\n    begin: /\\{\\{/,\n    relevance: 0\n  };\n  const STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [{\n      begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n      end: /'''/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT],\n      relevance: 10\n    }, {\n      begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n      end: /\"\"\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT],\n      relevance: 10\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n      end: /'''/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n      end: /\"\"\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]\n    }, {\n      begin: /([uU]|[rR])'/,\n      end: /'/,\n      relevance: 10\n    }, {\n      begin: /([uU]|[rR])\"/,\n      end: /\"/,\n      relevance: 10\n    }, {\n      begin: /([bB]|[bB][rR]|[rR][bB])'/,\n      end: /'/\n    }, {\n      begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n      end: /\"/\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])'/,\n      end: /'/,\n      contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n      end: /\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]\n    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]\n  };\n\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n  const digitpart = '[0-9](_?[0-9])*';\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n    // exponentfloat, pointfloat\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n    // optionally imaginary\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n    // Note: no leading \\b because floats can start with a decimal point\n    // and we don't want to mishandle e.g. `fn(.5)`,\n    // no trailing \\b for pointfloat because it can end with a decimal point\n    // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n    // because both MUST contain a decimal point and so cannot be confused with\n    // the interior part of an identifier\n    {\n      begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b`\n    }, {\n      begin: `(${pointfloat})[jJ]?`\n    },\n    // decinteger, bininteger, octinteger, hexinteger\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n    // optionally \"long\" in Python 2\n    // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n    // decinteger is optionally imaginary\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n    {\n      begin: '\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b'\n    }, {\n      begin: '\\\\b0[bB](_?[01])+[lL]?\\\\b'\n    }, {\n      begin: '\\\\b0[oO](_?[0-7])+[lL]?\\\\b'\n    }, {\n      begin: '\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b'\n    },\n    // imagnumber (digitpart-based)\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n    {\n      begin: `\\\\b(${digitpart})[jJ]\\\\b`\n    }]\n  };\n  const COMMENT_TYPE = {\n    className: \"comment\",\n    begin: lookahead(/# type:/),\n    end: /$/,\n    keywords: KEYWORDS,\n    contains: [{\n      // prevent keywords from coloring `type`\n      begin: /# type:/\n    },\n    // comment within a datatype comment includes no keywords\n    {\n      begin: /#/,\n      end: /\\b\\B/,\n      endsWithParent: true\n    }]\n  };\n  const PARAMS = {\n    className: 'params',\n    variants: [\n    // Exclude params in functions without params\n    {\n      className: \"\",\n      begin: /\\(\\s*\\)/,\n      skip: true\n    }, {\n      begin: /\\(/,\n      end: /\\)/,\n      excludeBegin: true,\n      excludeEnd: true,\n      keywords: KEYWORDS,\n      contains: ['self', PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE]\n    }]\n  };\n  SUBST.contains = [STRING, NUMBER, PROMPT];\n  return {\n    name: 'Python',\n    aliases: ['py', 'gyp', 'ipython'],\n    keywords: KEYWORDS,\n    illegal: /(<\\/|->|\\?)|=>/,\n    contains: [PROMPT, NUMBER, {\n      // very common convention\n      begin: /\\bself\\b/\n    }, {\n      // eat \"if\" prior to string so that it won't accidentally be\n      // labeled as an f-string\n      beginKeywords: \"if\",\n      relevance: 0\n    }, STRING, COMMENT_TYPE, hljs.HASH_COMMENT_MODE, {\n      variants: [{\n        className: 'function',\n        beginKeywords: 'def'\n      }, {\n        className: 'class',\n        beginKeywords: 'class'\n      }],\n      end: /:/,\n      illegal: /[${=;\\n,]/,\n      contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS, {\n        begin: /->/,\n        endsWithParent: true,\n        keywords: KEYWORDS\n      }]\n    }, {\n      className: 'meta',\n      begin: /^[\\t ]*@/,\n      end: /(?=#)|$/,\n      contains: [NUMBER, PARAMS, STRING]\n    }]\n  };\n}\nmodule.exports = python;"],"names":["module","exports","hljs","KEYWORDS","$pattern","keyword","built_in","literal","type","PROMPT","className","begin","SUBST","end","keywords","illegal","LITERAL_BRACKET","relevance","STRING","contains","BACKSLASH_ESCAPE","variants","APOS_STRING_MODE","QUOTE_STRING_MODE","digitpart","pointfloat","NUMBER","COMMENT_TYPE","re","args","map","x","source","join","concat","endsWithParent","PARAMS","skip","excludeBegin","excludeEnd","HASH_COMMENT_MODE","name","aliases","beginKeywords","UNDERSCORE_TITLE_MODE"],"sourceRoot":""}