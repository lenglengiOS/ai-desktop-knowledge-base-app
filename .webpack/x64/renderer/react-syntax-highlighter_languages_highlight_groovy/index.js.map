{"version":3,"file":"react-syntax-highlighter_languages_highlight_groovy/index.js","mappings":"4HAuCA,SAASA,EAASA,EAAUC,EAAM,CAAC,GAEjC,OADAA,EAAID,SAAWA,EACRC,CACT,CAkFAC,EAAOC,QAjFP,SAAgBC,GACd,MAAMC,EAAW,iBACXC,EAAUN,EAAS,CAACI,EAAKG,oBAAqBH,EAAKI,qBAAsBJ,EAAKE,QAAQ,UAAW,OAAQ,CAC7GG,UAAW,EACXC,SAAU,CAAC,CAETC,MAAO,OACPF,UAAW,GACV,CACDG,UAAW,SACXD,MAAO,mBAGLE,EAAS,CACbD,UAAW,SACXD,MAAO,iBACPD,SAAU,CAACN,EAAKU,mBAEZC,EAASf,EAAS,CAACI,EAAKY,mBAAoBZ,EAAKa,gBACjDC,EAASlB,EAAS,CAAC,CACvBW,MAAO,MACPQ,IAAK,OACJ,CACDR,MAAO,MACPQ,IAAK,OACJ,CACDR,MAAO,OACPQ,IAAK,OACLV,UAAW,IACVL,EAAKgB,iBAAkBhB,EAAKiB,mBAAoB,CACjDT,UAAW,WAEb,MAAO,CACLU,KAAM,SACNC,SAAU,CACRC,SAAU,aACVC,QAAS,kBACTC,QAAS,6TAMXhB,SAAU,CAACN,EAAKuB,QAAQ,CACtBC,OAAQ,SACRnB,UAAW,KACTH,EAASY,EAAQL,EAAQE,EAAQ,CACnCH,UAAW,QACXiB,cAAe,6BACfV,IAAK,KACLW,QAAS,IACTpB,SAAU,CAAC,CACTmB,cAAe,sBACdzB,EAAK2B,wBACP,CACDnB,UAAW,OACXD,MAAO,aACPF,UAAW,GACV,CAEDG,UAAW,OACXD,MAAON,EAAW,UAClBI,UAAW,GACV,CAGDE,MAAO,KACPQ,IAAK,IACLV,UAAW,EACXC,SAAU,CAACJ,EAASY,EAAQL,EAAQE,EAAQ,SAC3C,CAEDH,UAAW,SACXD,MAAO,WAjGMqB,EAiGgB3B,EAAW,IAzF9C,YAAmB4B,GAEjB,OADeA,EAAKC,KAAIC,GAnB1B,SAAgBH,GACd,OAAKA,EACa,iBAAPA,EAAwBA,EAC5BA,EAAGI,OAFM,IAGlB,CAe+BA,CAAOD,KAAIE,KAAK,GAE/C,CAVSC,CAAO,MAAON,EAAI,MAiGrBO,cAAc,EACdpB,IAAKd,EAAW,IAChBI,UAAW,IAEbqB,QAAS,SAtGb,IAAmBE,CAwGnB,C","sources":["webpack://ai-desktop-knowledge-base-app/./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/groovy.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n\n/*\n Language: Groovy\n Author: Guillaume Laforge <glaforge@gmail.com>\n Description: Groovy programming language implementation inspired from Vsevolod's Java mode\n Website: https://groovy-lang.org\n */\n\nfunction variants(variants, obj = {}) {\n  obj.variants = variants;\n  return obj;\n}\nfunction groovy(hljs) {\n  const IDENT_RE = '[A-Za-z0-9_$]+';\n  const COMMENT = variants([hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.COMMENT('/\\\\*\\\\*', '\\\\*/', {\n    relevance: 0,\n    contains: [{\n      // eat up @'s in emails to prevent them to be recognized as doctags\n      begin: /\\w+@/,\n      relevance: 0\n    }, {\n      className: 'doctag',\n      begin: '@[A-Za-z]+'\n    }]\n  })]);\n  const REGEXP = {\n    className: 'regexp',\n    begin: /~?\\/[^\\/\\n]+\\//,\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  const NUMBER = variants([hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]);\n  const STRING = variants([{\n    begin: /\"\"\"/,\n    end: /\"\"\"/\n  }, {\n    begin: /'''/,\n    end: /'''/\n  }, {\n    begin: \"\\\\$/\",\n    end: \"/\\\\$\",\n    relevance: 10\n  }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE], {\n    className: \"string\"\n  });\n  return {\n    name: 'Groovy',\n    keywords: {\n      built_in: 'this super',\n      literal: 'true false null',\n      keyword: 'byte short char int long boolean float double void ' +\n      // groovy specific keywords\n      'def as in assert trait ' +\n      // common keywords with Java\n      'abstract static volatile transient public private protected synchronized final ' + 'class interface enum if else for while switch case break default continue ' + 'throw throws try catch finally implements extends new import package return instanceof'\n    },\n    contains: [hljs.SHEBANG({\n      binary: \"groovy\",\n      relevance: 10\n    }), COMMENT, STRING, REGEXP, NUMBER, {\n      className: 'class',\n      beginKeywords: 'class interface trait enum',\n      end: /\\{/,\n      illegal: ':',\n      contains: [{\n        beginKeywords: 'extends implements'\n      }, hljs.UNDERSCORE_TITLE_MODE]\n    }, {\n      className: 'meta',\n      begin: '@[A-Za-z]+',\n      relevance: 0\n    }, {\n      // highlight map keys and named parameters as attrs\n      className: 'attr',\n      begin: IDENT_RE + '[ \\t]*:',\n      relevance: 0\n    }, {\n      // catch middle element of the ternary operator\n      // to avoid highlight it as a label, named parameter, or map key\n      begin: /\\?/,\n      end: /:/,\n      relevance: 0,\n      contains: [COMMENT, STRING, REGEXP, NUMBER, 'self']\n    }, {\n      // highlight labeled statements\n      className: 'symbol',\n      begin: '^[ \\t]*' + lookahead(IDENT_RE + ':'),\n      excludeBegin: true,\n      end: IDENT_RE + ':',\n      relevance: 0\n    }],\n    illegal: /#|<\\//\n  };\n}\nmodule.exports = groovy;"],"names":["variants","obj","module","exports","hljs","IDENT_RE","COMMENT","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","relevance","contains","begin","className","REGEXP","BACKSLASH_ESCAPE","NUMBER","BINARY_NUMBER_MODE","C_NUMBER_MODE","STRING","end","APOS_STRING_MODE","QUOTE_STRING_MODE","name","keywords","built_in","literal","keyword","SHEBANG","binary","beginKeywords","illegal","UNDERSCORE_TITLE_MODE","re","args","map","x","source","join","concat","excludeBegin"],"sourceRoot":""}