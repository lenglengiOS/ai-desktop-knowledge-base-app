{"version":3,"file":"react-syntax-highlighter_languages_highlight_markdown/index.js","mappings":"4HAmBA,SAASA,KAAUC,GAEjB,OADeA,EAAKC,KAAIC,IAAKC,OAXfC,EAWsBF,GATlB,iBAAPE,EAAwBA,EAC5BA,EAAGD,OAFM,KADlB,IAAgBC,CAWwB,IAAEC,KAAK,GAE/C,CAuLAC,EAAOC,QA7KP,SAAkBC,GAChB,MAAMC,EAAc,CAClBC,MAAO,gBACPC,IAAK,IACLC,YAAa,MACbC,UAAW,GA0DPC,EAAO,CACXC,SAAU,CAGV,CACEL,MAAO,iBACPG,UAAW,GAGb,CACEH,MAAO,gEACPG,UAAW,GACV,CACDH,MAAOX,EAAO,YAdC,0BAcwB,cACvCc,UAAW,GAGb,CACEH,MAAO,wBACPG,UAAW,GAGb,CACEH,MAAO,iBACPG,UAAW,IAEbG,aAAa,EACbC,SAAU,CAAC,CACTC,UAAW,SACXL,UAAW,EACXH,MAAO,MACPC,IAAK,MACLQ,cAAc,EACdC,WAAW,GACV,CACDF,UAAW,OACXL,UAAW,EACXH,MAAO,SACPC,IAAK,MACLQ,cAAc,EACdE,YAAY,GACX,CACDH,UAAW,SACXL,UAAW,EACXH,MAAO,SACPC,IAAK,MACLQ,cAAc,EACdE,YAAY,KAGVC,EAAO,CACXJ,UAAW,SACXD,SAAU,GAEVF,SAAU,CAAC,CACTL,MAAO,OACPC,IAAK,QACJ,CACDD,MAAO,QACPC,IAAK,WAGHY,EAAS,CACbL,UAAW,WACXD,SAAU,GAEVF,SAAU,CAAC,CACTL,MAAO,WACPC,IAAK,MACJ,CACDD,MAAO,SACPC,IAAK,IACLE,UAAW,KAGfS,EAAKL,SAASO,KAAKD,GACnBA,EAAON,SAASO,KAAKF,GACrB,IAAIG,EAAc,CAAChB,EAAaK,GA2BhC,OA1BAQ,EAAKL,SAAWK,EAAKL,SAASlB,OAAO0B,GACrCF,EAAON,SAAWM,EAAON,SAASlB,OAAO0B,GACzCA,EAAcA,EAAY1B,OAAOuB,EAAMC,GAwBhC,CACLG,KAAM,WACNC,QAAS,CAAC,KAAM,SAAU,OAC1BV,SAAU,CA1BG,CACbC,UAAW,UACXH,SAAU,CAAC,CACTL,MAAO,UACPC,IAAK,IACLM,SAAUQ,GACT,CACDf,MAAO,uBACPO,SAAU,CAAC,CACTP,MAAO,WACN,CACDA,MAAO,IACPC,IAAK,MACLM,SAAUQ,OAaKhB,EAlIR,CACXS,UAAW,SACXR,MAAO,mCACPC,IAAK,OACLU,YAAY,GA8H0BC,EAAMC,EAT3B,CACjBL,UAAW,QACXR,MAAO,SACPO,SAAUQ,EACVd,IAAK,KA1JM,CACXO,UAAW,OACXH,SAAU,CAEV,CACEL,MAAO,iCACN,CACDA,MAAO,iCAGT,CACEA,MAAO,MACPC,IAAK,aACJ,CACDD,MAAO,MACPC,IAAK,aACJ,CACDD,MAAO,SACN,CACDA,MAAO,kBAGPO,SAAU,CAAC,CACTP,MAAO,cACPC,IAAK,WAEPE,UAAW,KA9BS,CACtBH,MAAO,cACPC,IAAK,KAiKkFG,EA5HlE,CACrBJ,MAAO,eACPM,aAAa,EACbC,SAAU,CAAC,CACTC,UAAW,SACXR,MAAO,KACPC,IAAK,KACLQ,cAAc,EACdE,YAAY,GACX,CACDH,UAAW,OACXR,MAAO,OACPC,IAAK,IACLQ,cAAc,MAiHpB,C","sources":["webpack://ai-desktop-knowledge-base-app/./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/markdown.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n    // TODO: fix to allow these to work with sublanguage also\n    {\n      begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n    }, {\n      begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n    },\n    // needed to allow markdown as a sublanguage to work\n    {\n      begin: '```',\n      end: '```+[ ]*$'\n    }, {\n      begin: '~~~',\n      end: '~~~+[ ]*$'\n    }, {\n      begin: '`.+?`'\n    }, {\n      begin: '(?=^( {4}|\\\\t))',\n      // use contains to gobble up multiple lines to allow the block to be whatever size\n      // but only have a single open/close tag vs one per line\n      contains: [{\n        begin: '^( {4}|\\\\t)',\n        end: '(\\\\n)$'\n      }],\n      relevance: 0\n    }]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [{\n      className: 'symbol',\n      begin: /\\[/,\n      end: /\\]/,\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'link',\n      begin: /:\\s*/,\n      end: /$/,\n      excludeBegin: true\n    }]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [\n    // too much like nested array access in so many languages\n    // to have any real relevance\n    {\n      begin: /\\[.+?\\]\\[.*?\\]/,\n      relevance: 0\n    },\n    // popular internet URLs\n    {\n      begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n      relevance: 2\n    }, {\n      begin: concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n      relevance: 2\n    },\n    // relative urls\n    {\n      begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n      relevance: 1\n    },\n    // whatever else, lower relevance (might not be a link at all)\n    {\n      begin: /\\[.+?\\]\\(.*?\\)/,\n      relevance: 0\n    }],\n    returnBegin: true,\n    contains: [{\n      className: 'string',\n      relevance: 0,\n      begin: '\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      returnEnd: true\n    }, {\n      className: 'link',\n      relevance: 0,\n      begin: '\\\\]\\\\(',\n      end: '\\\\)',\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'symbol',\n      relevance: 0,\n      begin: '\\\\]\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      excludeEnd: true\n    }]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /_{2}/,\n      end: /_{2}/\n    }, {\n      begin: /\\*{2}/,\n      end: /\\*{2}/\n    }]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /\\*(?!\\*)/,\n      end: /\\*/\n    }, {\n      begin: /_(?!_)/,\n      end: /_/,\n      relevance: 0\n    }]\n  };\n  BOLD.contains.push(ITALIC);\n  ITALIC.contains.push(BOLD);\n  let CONTAINABLE = [INLINE_HTML, LINK];\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n  const HEADER = {\n    className: 'section',\n    variants: [{\n      begin: '^#{1,6}',\n      end: '$',\n      contains: CONTAINABLE\n    }, {\n      begin: '(?=^.+?\\\\n[=-]{2,}$)',\n      contains: [{\n        begin: '^[=-]*$'\n      }, {\n        begin: '^',\n        end: \"\\\\n\",\n        contains: CONTAINABLE\n      }]\n    }]\n  };\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n  return {\n    name: 'Markdown',\n    aliases: ['md', 'mkdown', 'mkd'],\n    contains: [HEADER, INLINE_HTML, LIST, BOLD, ITALIC, BLOCKQUOTE, CODE, HORIZONTAL_RULE, LINK, LINK_REFERENCE]\n  };\n}\nmodule.exports = markdown;"],"names":["concat","args","map","x","source","re","join","module","exports","hljs","INLINE_HTML","begin","end","subLanguage","relevance","LINK","variants","returnBegin","contains","className","excludeBegin","returnEnd","excludeEnd","BOLD","ITALIC","push","CONTAINABLE","name","aliases"],"sourceRoot":""}