{"version":3,"file":"react-syntax-highlighter_languages_highlight_llvm/index.js","mappings":"4HAmBA,SAASA,KAAUC,GAEjB,OADeA,EAAKC,KAAIC,IAAKC,OAXfC,EAWsBF,GATlB,iBAAPE,EAAwBA,EAC5BA,EAAGD,OAFM,KADlB,IAAgBC,CAWwB,IAAEC,KAAK,GAE/C,CA6FAC,EAAOC,QAjFP,SAAcC,GACZ,MAAMC,EAAW,yBAgCXC,EAAW,CACfC,UAAW,WACXC,SAAU,CAAC,CACTC,MAAOd,EAAO,IAAKU,IAClB,CACDI,MAAO,QACN,CACDA,MAAO,UAGLC,EAAW,CACfH,UAAW,QACXC,SAAU,CAAC,CACTC,MAAOd,EAAO,IAAKU,IAClB,CACDI,MAAO,QACN,CACDA,MAAOd,EAAO,IAAKU,IAClB,CACDI,MAAOd,EAAO,OAAQU,IAIxB,CACEI,MAAO,UAGX,MAAO,CACLE,KAAM,UAENC,SAAU,ysDACVC,SAAU,CA9DC,CACXN,UAAW,OACXE,MAAO,mBAgEPL,EAAKU,QAAQ,QAAS,KAAM,CAC1BC,UAAW,IACTX,EAAKU,QAAQ,IAAK,KAAMV,EAAKY,kBAAmB,CAClDT,UAAW,SACXC,SAAU,CAEV,CACEC,MAAO,IACPQ,IAAK,YAENP,EAnEe,CAClBH,UAAW,cACXQ,UAAW,EACXN,MAAO,KARQ,CACfF,UAAW,WACXQ,UAAW,EACXN,MAAO,KAqE6BH,EArDxB,CACZC,UAAW,SACXC,SAAU,CAAC,CACTC,MAAO,gBAGTM,UAAW,GAfE,CACbR,UAAW,SACXC,SAAU,CAAC,CACTC,MAAO,qBACN,CACDA,MAAO,iDAETM,UAAW,IAyDf,C","sources":["webpack://ai-desktop-knowledge-base-app/./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/llvm.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: LLVM IR\nAuthor: Michael Rodler <contact@f0rki.at>\nDescription: language used as intermediate representation in the LLVM compiler framework\nWebsite: https://llvm.org/docs/LangRef.html\nCategory: assembler\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction llvm(hljs) {\n  const IDENT_RE = /([-a-zA-Z$._][\\w$.-]*)/;\n  const TYPE = {\n    className: 'type',\n    begin: /\\bi\\d+(?=\\s|\\b)/\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    begin: /=/\n  };\n  const PUNCTUATION = {\n    className: 'punctuation',\n    relevance: 0,\n    begin: /,/\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: /0[xX][a-fA-F0-9]+/\n    }, {\n      begin: /-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?/\n    }],\n    relevance: 0\n  };\n  const LABEL = {\n    className: 'symbol',\n    variants: [{\n      begin: /^\\s*[a-z]+:/\n    } // labels\n    ],\n    relevance: 0\n  };\n  const VARIABLE = {\n    className: 'variable',\n    variants: [{\n      begin: concat(/%/, IDENT_RE)\n    }, {\n      begin: /%\\d+/\n    }, {\n      begin: /#\\d+/\n    }]\n  };\n  const FUNCTION = {\n    className: 'title',\n    variants: [{\n      begin: concat(/@/, IDENT_RE)\n    }, {\n      begin: /@\\d+/\n    }, {\n      begin: concat(/!/, IDENT_RE)\n    }, {\n      begin: concat(/!\\d+/, IDENT_RE)\n    },\n    // https://llvm.org/docs/LangRef.html#namedmetadatastructure\n    // obviously a single digit can also be used in this fashion\n    {\n      begin: /!\\d+/\n    }]\n  };\n  return {\n    name: 'LLVM IR',\n    // TODO: split into different categories of keywords\n    keywords: 'begin end true false declare define global ' + 'constant private linker_private internal ' + 'available_externally linkonce linkonce_odr weak ' + 'weak_odr appending dllimport dllexport common ' + 'default hidden protected extern_weak external ' + 'thread_local zeroinitializer undef null to tail ' + 'target triple datalayout volatile nuw nsw nnan ' + 'ninf nsz arcp fast exact inbounds align ' + 'addrspace section alias module asm sideeffect ' + 'gc dbg linker_private_weak attributes blockaddress ' + 'initialexec localdynamic localexec prefix unnamed_addr ' + 'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' + 'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' + 'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' + 'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' + 'cc c signext zeroext inreg sret nounwind ' + 'noreturn noalias nocapture byval nest readnone ' + 'readonly inlinehint noinline alwaysinline optsize ssp ' + 'sspreq noredzone noimplicitfloat naked builtin cold ' + 'nobuiltin noduplicate nonlazybind optnone returns_twice ' + 'sanitize_address sanitize_memory sanitize_thread sspstrong ' + 'uwtable returned type opaque eq ne slt sgt ' + 'sle sge ult ugt ule uge oeq one olt ogt ' + 'ole oge ord uno ueq une x acq_rel acquire ' + 'alignstack atomic catch cleanup filter inteldialect ' + 'max min monotonic nand personality release seq_cst ' + 'singlethread umax umin unordered xchg add fadd ' + 'sub fsub mul fmul udiv sdiv fdiv urem srem ' + 'frem shl lshr ashr and or xor icmp fcmp ' + 'phi call trunc zext sext fptrunc fpext uitofp ' + 'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' + 'addrspacecast select va_arg ret br switch invoke ' + 'unwind unreachable indirectbr landingpad resume ' + 'malloc alloca free load store getelementptr ' + 'extractelement insertelement shufflevector getresult ' + 'extractvalue insertvalue atomicrmw cmpxchg fence ' + 'argmemonly double',\n    contains: [TYPE,\n    // this matches \"empty comments\"...\n    // ...because it's far more likely this is a statement terminator in\n    // another language than an actual comment\n    hljs.COMMENT(/;\\s*$/, null, {\n      relevance: 0\n    }), hljs.COMMENT(/;/, /$/), hljs.QUOTE_STRING_MODE, {\n      className: 'string',\n      variants: [\n      // Double-quoted string\n      {\n        begin: /\"/,\n        end: /[^\\\\]\"/\n      }]\n    }, FUNCTION, PUNCTUATION, OPERATOR, VARIABLE, LABEL, NUMBER]\n  };\n}\nmodule.exports = llvm;"],"names":["concat","args","map","x","source","re","join","module","exports","hljs","IDENT_RE","VARIABLE","className","variants","begin","FUNCTION","name","keywords","contains","COMMENT","relevance","QUOTE_STRING_MODE","end"],"sourceRoot":""}